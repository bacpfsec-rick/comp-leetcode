/**
 * C++ solution
 * Trick: Using Hash O(n) instead of brutal force O(n^2)
 * Running time: O(n)
 */
class Solution {
public:
    vector<int> twoSum(vector<int> &numbers, int target) {
        vector<int> result;
        map<int,int> m;
        for (int i = 0; i < numbers.size(); i++) {
            if (m[target-numbers[i]]!=0) {
                result.push_back(m[target-numbers[i]]);
                result.push_back(i+1); // index conversion
                break;
            } else {
                m[numbers[i]] = i+1;
            }
        }
        return result;
    }
};





/**
 * Python solution
 */
class Solution:
    # @return a tuple, (index1, index2)
    def twoSum(self, num, target):
        hm = {}
        for i in range(0,len(num)) :
            if (target-num[i]) in hm :
                return (hm[target-num[i]],i+1)
            else :
                hm[num[i]]=i+1
		
    

		
		

/**
 * Java solution
 */
public class Solution {
    public int firstMissingPositive(int[] A) {
        if (A.length==0) {
            return 1;
        }
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        for (int i=0; i<A.length; ++i) {
            if (A[i]>0) {
                hm.put(A[i],1);
            }
        }
        int result = 1;
        while (true) {
            if (hm.containsKey(result)) {
                ++result;
            } else {
                return result;
            }
        }
    }
}