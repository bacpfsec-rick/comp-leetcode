/**
 * C++ solution based on recursion
 * Running time: O(n)
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        if (l1==NULL && l2==NULL) {
            return NULL;
        } else if (l1==NULL) {
            return l2;
        } else if (l2==NULL) {
            return l1;
        } else {
            if (l1->val >= l2->val) {
                l2->next = mergeTwoLists(l1,l2->next);
                return l2;	
            } else {
                l1->next = mergeTwoLists(l1->next,l2);
                return l1;
            }
        }
        return NULL;
    }
};





/**
 * Python solution
 */
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param two ListNodes
    # @return a ListNode
    def mergeTwoLists(self, l1, l2):
        if ((l1 is None) and (l2 is None)):
            return None
        elif (l1 is None):
            return l2
        elif (l2 is None):
            return l1
        else:
            if (l1.val >= l2.val):
                l2.next = self.mergeTwoLists(l1,l2.next)
                return l2
            else:
                l1.next = self.mergeTwoLists(l1.next,l2)
                return l1
        return None
		
    

		
		

/**
 * Java solution
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1==null && l2==null) {
            return null;
        } else if (l1==null) {
            return l2;
        } else if (l2==null) {
            return l1;
        } else {
            if (l1.val>=l2.val) {
                l2.next = mergeTwoLists(l1,l2.next);
                return l2;
            } else {
                l1.next = mergeTwoLists(l1.next,l2);
                return l1;
            }
        }
    }
}