/**
 * C++ solution
 * Trick: Copy distinct values back to currPos and proceed
 * Running time: O(n)
 * Space: O(1)
 */
class Solution {
public:
    int removeDuplicates(int A[], int n) {
        int last = A[0], currPos = 1, length = n;
        for (int i=1; i<n; i++) {
            if(A[i]==last) {
                length--;
            } else { // update and proceed to next
                last = A[i];
                A[currPos] = last;
                currPos++;
            }
        }
        return length;
    }
};





/**
 * Python solution
 */
class Solution:
    # @param a list of integers
    # @return an integer
    def removeDuplicates(self, A):
        if (len(A)==0):
            return 0
        last = A[0]
        currPos = 1
        length = len(A)
        for i in range(1,len(A)):
            if A[i] == last:
                length -= 1
            else:
                last = A[i]
                A[currPos] = last
                currPos += 1
        return length
		
    

		
		

/**
 * Java solution
 * Trick: Use >>> for unsigned right shfit in Java
 *        count += (n%2) may cause error, which is likely due to the unsigned mechanism in Java
 */
public class Solution {
    public int removeDuplicates(int[] A) {
        if (A.length == 0) {
            return 0;
        }
        int last = A[0], currPos = 1, length = A.length;
        for (int i=1; i<A.length; i++) {
            if (last==A[i]) {
                length--;
            } else {
                last = A[i];
                A[currPos] = last;
                currPos++;
            }
        }
        return length;
    }
}