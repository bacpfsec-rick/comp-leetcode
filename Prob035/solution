/**
 * C++ solution 
 */
class Solution {
public:
    int searchInsert(int A[], int n, int target) {
        if (n==0) {
            return 0;
        }
        int result = 0;
        for (int i=0; i<n; i++) {
            if (target>A[i]) {
                ++result;
            }
        }
        return result;
    }
};





/**
 * Python solution
 */
# Definition for a  binary tree node
class Solution:
    # @param A, a list of integers
    # @param target, an integer to be inserted
    # @return integer
    def searchInsert(self, A, target):
        result = 0
        if (len(A) is not 0):
            for i in range(len(A)):
                if (target>A[i]):
                    result += 1
        return result
		
    

		
		

/**
 * Java solution
 */
public class Solution {
    public int searchInsert(int[] A, int target) {
        int result = 0;
        if (A.length!=0) {
            for (int i=0; i<A.length;i++) {
                if (target>A[i]) {
                    result++;
                } else {
                    break;
                }
            }
        }
        return result;
    }
}