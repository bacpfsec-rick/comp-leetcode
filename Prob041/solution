/**
 * C++ solution
 * Trick: Taking care of base case then using Hash map
 * Running time: O(n)
 */
class Solution {
public:
    int firstMissingPositive(int A[], int n) {
        /* Base case */
        if (n<1) {
            return 1;
        }
        /* Use hash map*/
        map<int,int> m;
        for (int i=0; i<n; ++i) {
            if (A[i]>0) {
                m[A[i]]=1;
            }
        }
        int missing = 1;
        while (true) {
            if (m[missing]==0) {
                return missing;
            }
            missing++;
        } 
    }
};





/**
 * Python solution
 */
class Solution:
    # @param A, a list of integers
    # @return an integer
    def firstMissingPositive(self, A):
        if (len(A)==0):
            return 1
        hm = {}
        for x in A:
            if (x>0):
                hm[x] = 1
        curr = 1
        while True:
            if curr in hm:
                curr += 1
            else:
                return curr
		
    

		
		

/**
 * Java solution
 */
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        int[] result = new int[2];
        for (int i=0; i<numbers.length; ++i) {
            if (hm.containsKey(target-numbers[i])) {
                result[0] = hm.get(target-numbers[i]);
                result[1] = i+1;
            } else {
                hm.put(numbers[i],i+1);
            }
        }
        return result;
    }
}