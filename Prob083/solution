/**
 * C++ solution
 * Running time: O(n)
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) {
        ListNode* curr = head;
        ListNode* temp;
        while (curr!=NULL && curr->next!=NULL) {
            temp = curr->next;
            if (curr->val == temp->val) {
                curr->next = temp->next;
                delete temp;
            } else {
                curr = curr->next;
            }
        }
        return head;
    }
};





/**
 * Python solution
 */
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @return a ListNode
    def deleteDuplicates(self, head):
        curr = head
        while ((curr != None) and (curr.next != None)):
            temp = curr.next
            if (curr.val == temp.val):
                curr.next = temp.next
            else:
                curr = curr.next
        return head
		
    

		
		

/**
 * Java solution
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode curr = head, temp;
        while (curr!=null && curr.next!=null) {
            temp = curr.next;
            if (curr.val == temp.val) {
                curr.next = temp.next;
            } else {
                curr = curr.next;
            }
        }
        return head;
    }
}