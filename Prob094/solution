/**
 * C++ solution based on non-recursion & stack
 * Trick: for inorder traversal, check left branch first, then record current root
 * then check right the branch
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        vector<int> res;
        stack<TreeNode*> s;
        if (root==NULL) {
            return res;
        }
        while (!s.empty() || (root!=NULL)) {
            while(root) {
                s.push(root);
                root=root->left;
            }
            root=s.top();
            s.pop();
            res.push_back(root->val);
            root=root->right;
        }
        return res;
    }
};





/**
 * Python solution based on stack and non-recursion
 */
# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param root, a tree node
    # @return a list of integers
    def inorderTraversal(self, root):
        res = []
        nodes = []
        while ((len(nodes) is not 0) or (root is not None)):
            while (root is not None):
                nodes.append(root)
                root = root.left
            root = nodes.pop()
            res.append(root.val)
            root = root.right
        return res
		
    

		
		

/**
 * Java solution
 */
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        Stack<TreeNode> nodes = new Stack<TreeNode>();
        while (nodes.size()!=0 || root!=null) {
            while(root!=null) {
                nodes.push(root);
                root = root.left;
            }
            root = nodes.pop();
            res.add(root.val);
            root = root.right;
        }
        return res;
    }
}