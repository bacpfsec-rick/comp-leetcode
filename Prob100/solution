/**
 * C++ solution
 * running time: O(n), literally n
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode *p, TreeNode *q) {
        // Base cases
        if (p==NULL && q==NULL) {
            return true;
        }
        if ((p==NULL && q!=NULL) || (p!=NULL && q==NULL)) {
            return false;
        }
        // Recursive check
        if (p->val != q->val) {
            return false;
        } else {
            return isSameTree(q->left,p->left) && isSameTree(q->right,p->right);
        }
    }
};





/**
 * Python solution
 */
# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param p, a tree node
    # @param q, a tree node
    # @return a boolean
    def isSameTree(self, p, q):
        if ( p==None and q==None ) :
            return True
        if ( (p==None) ^ (q==None) ):
            return False
        if ( p.val != q.val ):
            return False
        else:
            return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)		
		
    

		
		

/**
 * Java solution
 */
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p==null && q==null) {
            return true;
        }
        if (p==null ^ q==null) {
            return false;
        }
        if (p.val != q.val) {
            return false;
        } else {
            return isSameTree(q.left,p.left) && isSameTree(q.right,p.right);
        }        
    }
}