/**
 * C++ solution based on depth helper and recursion
 * Running time: O(nlgn)
 */
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode *root) {
        // base case 1
        if (root==NULL) {
            return true;
        } else if (abs(depth(root->left)-depth(root->right))>1) {
            return false;
        } else {
            return isBalanced(root->left) && isBalanced(root->right);
        }
    }
    
private:
    int depth(TreeNode *root) {
        if (root==NULL) {
            return 0;
        } else {
            return 1+max(depth(root->left),depth(root->right));
        }
    }
};





/**
 * Python solution with O(n) running time
 */
# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param root, a tree node
    # @return a boolean
    def isBalanced(self, root):
        self.depth(root)
        return self.balance
    
    balance = True
    
    def depth(self,root):
        if (root is None):
            return 0
        l = self.depth(root.left)
        r = self.depth(root.right)
        if (abs(l-r)>1):
            self.balance = False
        return 1+max(l,r)
        
		
    

		
		

/**
 * Java solution with static variable and O(n) running time
 */
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private boolean balance = true;
    
    public boolean isBalanced(TreeNode root) {
        depth(root);
        return balance;
    }
    
    public int depth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int ld = depth(root.left);
        int rd = depth(root.right);
        if (Math.abs(ld-rd)>1) {
            balance = false;
        }
        return 1+Math.max(ld,rd);
    }
}