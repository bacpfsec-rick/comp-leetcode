/**
 * C++ solution
 * running time: O(n), literally n
 */
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        // base case
        if (prices.size()==0) {
            return 0;
        }
        // summing up all ascending regions
        int maxProfit = 0, lastPrice = prices[0];
        for (int i=0; i<prices.size(); i++) {
            if (lastPrice<prices[i]) {
                maxProfit += (prices[i]-lastPrice);
            }
            lastPrice = prices[i];
        }
        return maxProfit;
    }
};





/**
 * Python solution
 */
class Solution:
    # @param prices, a list of integer
    # @return an integer
    def maxProfit(self, prices):
        if len(prices)<=1 :
            return 0
        profit = 0
        for i in range(len(prices)-1) :
            if prices[i]<prices[i+1] :
                profit += (prices[i+1]-prices[i])
        return profit	
		
    

		
		

/**
 * Java solution
 */
public class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length<=1) {
            return 0;
        }
        int profit = 0;
        for (int i=0; i<prices.length-1; i++) {
            profit += ((prices[i+1]>prices[i]) ? (prices[i+1]-prices[i]) : 0);
        }
        return profit;
    }
}