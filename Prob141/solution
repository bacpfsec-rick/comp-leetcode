/**
 * C++ solution
 * Trick: Race between faster pointer and slow pointer
 * Running time: O(n)
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (head==NULL) {
            return false;
        }
        ListNode* slow = head;
        ListNode* fast = head->next;
        while (fast!=NULL) {
            slow = slow->next;
            fast = fast->next;
            if (fast == NULL) {
                return false;
            }
            fast = fast->next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }
}





/**
 * Python solution
 */
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @return a boolean
    def hasCycle(self, head):
        if ((head is None) or (head.next is None)) :
            return False
        slow = head
        fast = head.next
        while (fast is not None) :
            if (slow==fast) :
                return True
            if (fast.next is None) :
                return False
            slow = slow.next
            fast = fast.next.next
        return False
		
    

		
		

/**
 * Java solution
 */
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast!=null) {
            if (fast==slow) {
                return true;
            }
            slow = slow.next;
            fast = fast.next;
            if (fast==null) {
                return false;
            }
            fast = fast.next;
        }
        return false;
    }
}