/**
 * C++ solution 1 based on hash map counting
 * Running time: O(n)
 */
class Solution {
public:
    int majorityElement(vector<int> &num) {
        int n = num.size();
        map<int,int> mp;
        for (int i=0; i<n; i++) {
            mp[num[i]] ++;
            if (mp[num[i]]>(n/2)) {
                return num[i];
            }
        }
    }
};



/**
 * C++ solution 2 based on n/2 domination from binarylu
 * Analysis:
 * Since there are at least n/2 major values
 * then count ++/-- would eventually be set to 0 for the minority 
 * Running time: O(n)
 */
class Solution {
public:
    int majorityElement(vector<int> &num) {
        int count = 0, result;
        for (int i = 0; i < num.size(); ++i) {
            if (count == 0) {
                result = num[i];
            }
            if (result == num[i]) {
                ++count;
            } else {
                --count;
            }
        }
        return result;
    }
};





/**
 * Python solution
 */
class Solution:
    # @param num, a list of integers
    # @return an integer
    def majorityElement(self, num):
        count = 0
        result = 0
        for i in range(len(num)):
            if count == 0:
                result = num[i]
            if result == num[i]:
                count += 1
            else:
                count -= 1
        return result
		
    

		
		

/**
 * Java solution
 */
public class Solution {
    public int majorityElement(int[] num) {
        int count = 0, result = 0;
        for (int i=0; i<num.length; i++) {
            if (count == 0) {
                result = num[i];
            }
            if (result == num[i]) {
                count++;
            } else {
                count--;
            }
        }
        return result;
    }
}