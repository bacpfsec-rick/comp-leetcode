/**
 * C++ solution
 * Trick: Using right-shift & count last bit, and trim method is possible
 * Running time: O(n)
 */
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        while (n!=0) { // trim
            count += n%2;
            n>>=1; //right shfit
        }
        return count;
    }
};





/**
 * Python solution
 */
class Solution:
    # @param n, an integer
    # @return an integer
    def hammingWeight(self, n):
        count = 0
        for i in range (0,32):
            count += n%2;
            n>>=1;
        return count
		
    

		
		

/**
 * Java solution
 * Trick: Use >>> for unsigned right shfit in Java
 *        count += (n%2) may cause error, which is likely due to the unsigned mechanism in Java
 */
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count = 0;
        //for(int i=0; i<32; ++i) {
        while (n!=0) {
            count += n&1;
            n>>>=1;
        }
        return count;
    }
}